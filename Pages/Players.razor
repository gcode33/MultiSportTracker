@page "/players/{teamId}"
@inject ISportsApiService SportsApi
@using MultiSportTracker.Data
@using MultiSportTracker.Models

<div class="mb-8">
    <h1 class="text-2xl font-bold mb-4">
        <span class="text-primary">👥</span>
        Team Players
    </h1>
    <p class="text-gray">Explore the complete roster and player information</p>
</div>

@if (isLoading)
{
    <div class="loading-container">
        <div class="loading-spinner"></div>
        <h3 class="text-lg font-medium mb-2">Loading players...</h3>
        <p class="text-gray">Fetching the latest roster information</p>
    </div>
}
else if (!players.Any())
{
    <div class="empty-state">
        <div class="empty-state-icon">👥</div>
        <h3 class="text-xl font-semibold mb-2">No players found</h3>
        <p class="text-gray mb-6">Player roster information is not available for this team.</p>
        <a href="/" class="btn btn-primary">Back to Home</a>
    </div>
}
else
{
    <div class="mb-6">
        <div class="flex items-center justify-between mb-4">
            <p class="text-gray">Found <span class="font-semibold text-primary">@players.Count</span> players in the roster</p>
            @if (HasDemoData())
            {
                <div class="bg-warning-50 text-warning-700 px-3 py-1 rounded-full text-sm font-medium">
                    🎯 Demo Data
                </div>
            }
        </div>
        @if (HasDemoData())
        {
            <div class="bg-primary-50 border border-primary-200 rounded-lg p-4 mb-4">
                <div class="flex items-start gap-3">
                    <div class="text-primary-600 text-xl">💡</div>
                    <div>
                        <h4 class="font-semibold text-primary-800 mb-1">Player Data Limitation</h4>
                        <p class="text-sm text-primary-700">
                            The free sports API has limited player data. We're showing demo players with realistic positions for this team. 
                            <strong>Arsenal players from the API are real data!</strong>
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>
    
    <div class="card-grid">
        @foreach (var player in players)
        {
            <div class="card">
                <div class="card-header">
                    @if (!string.IsNullOrWhiteSpace(player.strCutout))
                    {
                        <img src="@player.strCutout" alt="@player.strPlayer" class="card-image" 
                             onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                        <div class="card-image" style="display: none; align-items: center; justify-content: center; background: var(--primary-100); color: var(--primary-600); font-weight: bold; font-size: 1.5rem;">
                            @GetPlayerInitials(player.strPlayer)
                        </div>
                    }
                    else
                    {
                        <div class="card-image" style="display: flex; align-items: center; justify-content: center; background: var(--primary-100); color: var(--primary-600); font-weight: bold; font-size: 1.5rem;">
                            @GetPlayerInitials(player.strPlayer)
                        </div>
                    }
                    <div>
                        <h3 class="card-title">@player.strPlayer</h3>
                        <p class="card-subtitle">@player.strTeam</p>
                    </div>
                </div>
                
                <div class="card-content">
                    <div class="flex items-center gap-2 text-sm text-gray mb-2">
                        <span class="font-medium">Position:</span>
                        <span class="text-primary bg-primary-100 px-2 py-1 rounded-lg">@(string.IsNullOrWhiteSpace(player.strPosition) ? "Unknown" : player.strPosition)</span>
                    </div>
                </div>
                
                <div class="card-actions">
                    <span class="btn btn-secondary btn-sm">📊 Player Stats</span>
                    <span class="btn btn-secondary btn-sm">📰 News</span>
                </div>
            </div>
        }
    </div>
}

@code {
    [Parameter] public string teamId { get; set; } = "";
    private List<Player> players = new();
    private bool isLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        await LoadPlayers();
    }

    private async Task LoadPlayers()
    {
        isLoading = true;
        StateHasChanged();
        
        try
        {
            players = await SportsApi.GetPlayersAsync(teamId);
        }
        catch
        {
            players = new List<Player>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetPlayerInitials(string playerName)
    {
        if (string.IsNullOrWhiteSpace(playerName)) return "?";
        
        var words = playerName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (words.Length >= 2)
        {
            return $"{words[0][0]}{words[1][0]}".ToUpperInvariant();
        }
        return playerName.Length >= 2 ? playerName.Substring(0, 2).ToUpperInvariant() : playerName.ToUpperInvariant();
    }
    
    private bool HasDemoData()
    {
        return players.Any(p => p.idPlayer?.StartsWith("demo_") == true || p.strPlayer?.StartsWith("Demo ") == true);
    }
}
